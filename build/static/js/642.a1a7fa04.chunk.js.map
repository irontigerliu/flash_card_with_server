{"version":3,"file":"static/js/642.a1a7fa04.chunk.js","mappings":"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","sources":["components/UserLists.tsx","components/QuestionCard.tsx","components/ResultCard.tsx","socket.js","views/FlashCard.tsx"],"sourcesContent":["import {\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  ListGroup,\r\n  //   CardSubtitle,\r\n  ListGroupItem,\r\n  Button,\r\n  // Col,\r\n  // Row,\r\n} from \"reactstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst UserLists = ({\r\n  handleJoinGame,\r\n  handleLeaveGame,\r\n  joinedUsers,\r\n  // waitingUsers,\r\n  joinedState,\r\n}) => {\r\n  const renderJoinButton = () => {\r\n    return (\r\n      <Button\r\n        className=\"btn rounded-pill col-md-6\"\r\n        color={joinedState ? \"danger\" : \"info\"}\r\n        size=\"lg\"\r\n        style={styles.actionButtonStryle}\r\n        onClick={joinedState ? handleLeaveGame : handleJoinGame}\r\n      >\r\n        {joinedState ? \"Leave Game\" : \"Join Game\"}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card style={styles.cardStyle}>\r\n        <CardTitle tag={\"h3\"} className=\"border-bottom p-3 mb-0 text-center\">\r\n          Contestants:\r\n        </CardTitle>\r\n        <CardBody>\r\n          {/* <CardTitle tag=\"h5\">User Lists</CardTitle>\r\n        <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\r\n          Here are joined users:\r\n        </CardSubtitle> */}\r\n          <ListGroup flush className=\"mt-4\">\r\n            {joinedUsers &&\r\n              joinedUsers.map((user, index) => (\r\n                <ListGroupItem\r\n                  key={index}\r\n                  action\r\n                  tag=\"a\"\r\n                  style={styles.userItemStyle}\r\n                  className=\"d-flex align-items-center p-3 border-0\"\r\n                >\r\n                  <div className=\"d-flex align-items-center p-2\">\r\n                    <img\r\n                      src={user.avatar}\r\n                      className=\"rounded-circle\"\r\n                      alt=\"avatar\"\r\n                      width=\"35\"\r\n                      height=\"35\"\r\n                    />\r\n                    <div className=\"ms-3\">\r\n                      <h3 className=\"mb-0\">{user.name}</h3>\r\n                      {/* <span>{user.email}</span> */}\r\n                    </div>\r\n                  </div>\r\n                  <h4 className=\"ms-auto\">{user.point} points</h4>\r\n                </ListGroupItem>\r\n              ))}\r\n          </ListGroup>\r\n        </CardBody>\r\n        {/* <CardTitle tag={\"h5\"} className=\"border-top p-3 mb-0 text-center\">\r\n          Waiting to join new game:\r\n        </CardTitle> */}\r\n        {/* <Row>\r\n          {waitingUsers &&\r\n            waitingUsers.map((user, index) => (\r\n              <Col key={index} xs=\"6\" sm=\"6\" md=\"6\" lg=\"4\" xl=\"4\" xxl=\"4\">\r\n                <div className=\"d-flex align-items-center p-2\">\r\n                  <img\r\n                    src={user.avatar}\r\n                    className=\"rounded-circle\"\r\n                    alt=\"avatar\"\r\n                    width=\"45\"\r\n                    height=\"45\"\r\n                  />\r\n                  <div className=\"ms-3\">\r\n                    <h4 className=\"mb-0\">{user.name}</h4>\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n            ))}\r\n        </Row> */}\r\n      </Card>\r\n\r\n      <center>{renderJoinButton()}</center>\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  cardStyle: {\r\n    backgroundColor: \"rgba(255, 255, 255, 0.77)\",\r\n    color: \"black\",\r\n    marginTop: innerHeight * 0.1,\r\n    height: innerHeight * 0.7,\r\n    minWidth: 350,\r\n    overflow: \"auto\",\r\n  },\r\n  userItemStyle: {\r\n    // backgroundColor: \"#3699ff\",\r\n    color: \"black\",\r\n    borderRadius: 10,\r\n    marginTop: 2,\r\n    marginBottom: 2,\r\n    boxShadow: \"10px 10px 5px rgba(0, 0, 0, 0.3)\",\r\n  },\r\n  actionButtonStryle: {\r\n    paddingLeft: 20,\r\n    paddingRight: 20,\r\n    minWidth: 175,\r\n    fontSize: 25,\r\n  },\r\n};\r\n\r\nUserLists.propTypes = {\r\n  handleJoinGame: PropTypes.func,\r\n  handleLeaveGame: PropTypes.func,\r\n  joinedUsers: PropTypes.array,\r\n  waitingUsers: PropTypes.array,\r\n  joinedState: PropTypes.bool,\r\n  gameStarted: PropTypes.bool,\r\n  handleStartGame: PropTypes.func,\r\n};\r\n\r\nexport default UserLists;\r\n","/* eslint-disable react/react-in-jsx-scope */\r\nimport { Button, Card, CardBody, CardTitle, Row, Col } from \"reactstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst QuestionCard = ({\r\n  content,\r\n  options,\r\n  handleMarkOption,\r\n  joinedState,\r\n  currentQuestionNum,\r\n  gameStarted,\r\n  handleStartGame,\r\n}) => {\r\n  const renderStartGameButton = () => {\r\n    return (\r\n      <Button\r\n        className=\"btn rounded-pill\"\r\n        color=\"info\"\r\n        size=\"lg\"\r\n        style={styles.actionButtonStryle}\r\n        hidden={!joinedState || gameStarted}\r\n        onClick={handleStartGame}\r\n      >\r\n        Start new game\r\n      </Button>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <Card style={styles.cardStyle}>\r\n        <CardTitle tag=\"h4\" className=\"text-left p-3 mb-0\">\r\n          {currentQuestionNum} / 15\r\n        </CardTitle>\r\n        <CardTitle tag=\"h3\" className=\"border-bottom p-3 mb-0 text-center\">\r\n          {content}\r\n        </CardTitle>\r\n        <CardBody className=\"text-center\">\r\n          {/* <div className=\"button-group\"> */}\r\n          <Row>\r\n            {options.map((option: string, index: number) => (\r\n              <Col key={index} xs=\"6\" sm=\"6\" md=\"6\" lg=\"6\" xl=\"6\" xxl=\"6\">\r\n                <Button\r\n                  className=\"btn rounded-pill\"\r\n                  color=\"info\"\r\n                  size=\"lg\"\r\n                  block\r\n                  disabled={joinedState && gameStarted ? false : true}\r\n                  style={styles.optionButtonStyle}\r\n                  onClick={() => handleMarkOption(option, index)}\r\n                >\r\n                  {option}\r\n                </Button>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n          {/* </div> */}\r\n        </CardBody>\r\n      </Card>\r\n      <center>{renderStartGameButton()}</center>\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  cardStyle: {\r\n    backgroundColor: \"rgba(255, 255, 255, 0.77)\",\r\n    color: \"black\",\r\n    marginTop: innerHeight * 0.1,\r\n    height: innerHeight * 0.7,\r\n    minWidth: 400,\r\n  },\r\n  optionButtonStyle: {\r\n    marginTop: 5,\r\n    minWidth: 315,\r\n    fontSize: 25,\r\n  },\r\n  actionButtonStryle: {\r\n    paddingLeft: 20,\r\n    paddingRight: 20,\r\n    minWidth: 175,\r\n  },\r\n};\r\n\r\nQuestionCard.propTypes = {\r\n  content: PropTypes.string,\r\n  options: PropTypes.array,\r\n  handleMarkOption: PropTypes.func,\r\n  joinedState: PropTypes.bool,\r\n  currentQuestionNum: PropTypes.number,\r\n  gameStarted: PropTypes.bool,\r\n  handleStartGame: PropTypes.func,\r\n};\r\n\r\nexport default QuestionCard;\r\n","import { Card, CardBody, CardTitle, Badge } from \"reactstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ResultCard = ({ content, answer, winner, currentQuestionNum }) => {\r\n  const renderWinner = () => {\r\n    if (winner) {\r\n      return (\r\n        <>\r\n          <h3 style={{ color: \"red\", fontWeight: \"bold\", marginRight: 20 }}>\r\n            Winner:{\" \"}\r\n          </h3>\r\n          <img\r\n            src={\"assets/images/users/\" + winner.name + \".png\"}\r\n            className=\"rounded-circle\"\r\n            alt=\"avatar\"\r\n            width=\"45\"\r\n            height=\"45\"\r\n          />\r\n          <h3 className=\"mb-0\" style={{ marginLeft: 20 }}>\r\n            {winner.name}\r\n          </h3>\r\n        </>\r\n      );\r\n    } else return null;\r\n  };\r\n\r\n  return (\r\n    <Card style={styles.cardStyle}>\r\n      {/* <img \r\n                alt=\"Card image cap\" \r\n                srcSet=\"/static/media/bg3.5668e1f0dc365cf13f41.jpg\" \r\n                className=\"card-img\"\r\n                /> */}\r\n      <CardTitle tag=\"h4\" className=\"text-left p-3 mb-0\">\r\n        {currentQuestionNum} / 15\r\n      </CardTitle>\r\n      <CardTitle tag=\"h3\" className=\"border-bottom p-3 mb-0 text-center\">\r\n        {content}\r\n      </CardTitle>\r\n      <CardBody className=\"text-center\">\r\n        <h3\r\n          color=\"primary rounded-pill\"\r\n          className=\"bg-primary rounded-pill\"\r\n          style={{ color: \"white\", padding: 5 }}\r\n        >\r\n          {answer.content + \"  \"}\r\n          <Badge\r\n            className=\"rounded-circle\"\r\n            color={answer.correct ? \"success\" : \"danger\"}\r\n          >\r\n            {answer.correct ? (\r\n              <i className=\"bi bi-check\"></i>\r\n            ) : (\r\n              <i className=\"bi bi-x-lg\"></i>\r\n            )}\r\n          </Badge>\r\n        </h3>\r\n        <CardTitle tag=\"h4\">\r\n          <div\r\n            className=\"d-flex text-center p-4\"\r\n            style={{ justifyContent: \"center\" }}\r\n          >\r\n            {renderWinner()}\r\n          </div>\r\n        </CardTitle>\r\n        <CardTitle tag=\"h3\" style={{ color: answer.correct ? \"red\" : \"blue\" }}>\r\n          {answer.correct ? \"+\" : \"-\"}5pts\r\n        </CardTitle>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  cardStyle: {\r\n    backgroundColor: \"rgba(255, 255, 255, 0.77)\",\r\n    color: \"black\",\r\n    marginTop: innerHeight * 0.1,\r\n    height: innerHeight * 0.7,\r\n  },\r\n};\r\n\r\nResultCard.propTypes = {\r\n  content: PropTypes.string,\r\n  answer: PropTypes.object,\r\n  winner: PropTypes.object,\r\n  currentQuestionNum: PropTypes.number,\r\n};\r\n\r\nexport default ResultCard;\r\n","/* eslint-disable no-undef */\r\nimport { io } from \"socket.io-client\";\r\n\r\n// \"undefined\" means the URL will be computed from the `window.location` object\r\nconst URL =\r\n  process.env.NODE_ENV === \"production\" ? undefined : \"http://localhost:4000\";\r\n\r\nexport const socket = io(URL);\r\n","import { Col, Row } from \"reactstrap\";\r\nimport { useState, useEffect } from \"react\";\r\nimport UserLists from \"../components/UserLists\";\r\nimport QuestionCard from \"../components/QuestionCard\";\r\nimport ResultCard from \"../components/ResultCard\";\r\nimport Countdown from \"react-countdown\";\r\n// import ReadyCard from \"../components/ReadyCard\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst questions = require(\"../apis/questionQuery\").questions;\r\n\r\nimport { socket } from \"../socket\";\r\n\r\nconst FlashCard = () => {\r\n  const [questionIndex, selectQuestion] = useState(0);\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [selectedOption, selectOption] = useState({\r\n    content: \"\",\r\n    correct: false,\r\n  });\r\n  const [joinedState, setJoinedState] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [joinedUsers, setJoinedUsers] = useState(null);\r\n  const [waitingUsers, setWaitingUsers] = useState(null);\r\n  const [winner, setWinner] = useState(null);\r\n  const [gameStarted, setGameState] = useState(false);\r\n  const [isCountdownShow, countdownShow] = useState(false);\r\n  const [currentQuestionNum, setCurrentQuestionNum] = useState(0);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"users_state_refreshed\", (users) => {\r\n      setJoinedUsers(users.filter((user) => user.joined));\r\n      setWaitingUsers(users.filter((user) => !user.joined));\r\n    });\r\n\r\n    socket.on(\"join_request_success\", (user) => {\r\n      setUser(user);\r\n      setJoinedState(true);\r\n    });\r\n\r\n    socket.on(\"leave_request_success\", () => {\r\n      setJoinedState(false);\r\n    });\r\n\r\n    socket.on(\"receive_init_question_id\", (param) => {\r\n      selectQuestion(param);\r\n    });\r\n\r\n    socket.on(\"show_winner_and_next_question\", (param) => {\r\n      selectOption({ content: param.answer, correct: true });\r\n      setWinner(param.winner);\r\n      setShowResult(true);\r\n      setTimeout(() => {\r\n        setShowResult(false);\r\n        socket.emit(\"change_user_point\", { plus: true });\r\n        setWinner(null);\r\n        selectQuestion(param.nextQuestionId);\r\n      }, 2000);\r\n    });\r\n\r\n    socket.on(\"receive_current_question_number\", (currentQuestionNum) => {\r\n      setCurrentQuestionNum(currentQuestionNum);\r\n    });\r\n\r\n    socket.on(\"game_started\", () => {\r\n      countdownShow(true);\r\n      setGameState(true);\r\n    });\r\n\r\n    socket.on(\"game_finished\", () => {\r\n      setGameState(false);\r\n    });\r\n\r\n    socket.on(\"receive_game_state\", (gameStarted) => {\r\n      setGameState(gameStarted);\r\n    });\r\n  }, []);\r\n\r\n  const handleMarkOption = (option: string, index: number) => {\r\n    if (index === questions[questionIndex].answer) {\r\n      socket.emit(\"show_winner_and_next_question\", {\r\n        answer: option,\r\n        nextQuestionId: handleGetNextQuestionId(),\r\n      });\r\n    } else {\r\n      selectOption({ content: option, correct: false });\r\n      setShowResult(true);\r\n      setTimeout(() => {\r\n        setShowResult(false);\r\n        socket.emit(\"change_user_point\", { plus: false });\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  const handleJoinGame = () => {\r\n    socket.emit(\"user_join_request\");\r\n  };\r\n\r\n  const handleLeaveGame = () => {\r\n    socket.emit(\"user_leave_request\", user);\r\n    countdownShow(false);\r\n  };\r\n\r\n  const handleGetNextQuestionId = () => {\r\n    const tempIndex: number = Math.floor(Math.random() * questions.length);\r\n\r\n    if (tempIndex === questionIndex) {\r\n      return handleGetNextQuestionId();\r\n    } else {\r\n      return tempIndex;\r\n    }\r\n  };\r\n\r\n  const handleShowCard = () => {\r\n    const question = questions[questionIndex];\r\n\r\n    return (\r\n      <QuestionCard\r\n        content={question.content}\r\n        options={question.options}\r\n        handleMarkOption={handleMarkOption}\r\n        joinedState={joinedState}\r\n        currentQuestionNum={currentQuestionNum}\r\n        gameStarted={gameStarted}\r\n        handleStartGame={handleStartGame}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleShowResult = () => {\r\n    const question = questions[questionIndex];\r\n\r\n    return (\r\n      <ResultCard\r\n        content={question.content}\r\n        answer={selectedOption}\r\n        winner={winner}\r\n        currentQuestionNum={currentQuestionNum}\r\n      />\r\n    );\r\n  };\r\n\r\n  const countdownRenderer = ({ seconds, completed }) => {\r\n    if (completed) {\r\n      return (\r\n        <div style={styles.countdownStyle}>\r\n          <span style={styles.countdownFontStyle}>Let&apos;s go!</span>;\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div style={styles.countdownStyle}>\r\n          <span style={styles.countdownFontStyle}>{seconds}</span>;\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleStartGame = () => {\r\n    socket.emit(\"game_started\");\r\n  };\r\n\r\n  const handleCountdownCompleted = () => {\r\n    setTimeout(() => {\r\n      // countdownShow(false);\r\n    }, 1500);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col xs=\"4\" sm=\"4\" md=\"4\" lg=\"4\" xl=\"4\" xxl=\"4\">\r\n          <UserLists\r\n            handleJoinGame={handleJoinGame}\r\n            handleLeaveGame={handleLeaveGame}\r\n            joinedUsers={joinedUsers}\r\n            waitingUsers={waitingUsers}\r\n            joinedState={joinedState}\r\n            gameStarted={gameStarted}\r\n          />\r\n        </Col>\r\n\r\n        <Col xs=\"8\" sm=\"8\" md=\"8\" lg=\"8\" xl=\"8\" xxl=\"8\">\r\n          {isCountdownShow ? (\r\n            <Countdown\r\n              date={Date.now() + 3000}\r\n              renderer={countdownRenderer}\r\n              onComplete={handleCountdownCompleted}\r\n            />\r\n          ) : showResult && joinedState ? (\r\n            handleShowResult()\r\n          ) : (\r\n            handleShowCard()\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  countdownFontStyle: {\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    fontSize: 150,\r\n    fontFamily: \"-moz-initial\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  countdownStyle: {\r\n    paddingTop: innerHeight * 0.25,\r\n  },\r\n};\r\n\r\nexport default FlashCard;\r\n"],"names":["styles","cardStyle","backgroundColor","color","marginTop","innerHeight","height","minWidth","overflow","userItemStyle","borderRadius","marginBottom","boxShadow","actionButtonStryle","paddingLeft","paddingRight","fontSize","_ref","handleJoinGame","handleLeaveGame","joinedUsers","joinedState","_jsxs","_Fragment","children","Card","style","_jsx","CardTitle","tag","className","CardBody","ListGroup","flush","map","user","index","ListGroupItem","action","src","avatar","alt","width","name","point","Button","size","onClick","optionButtonStyle","content","options","handleMarkOption","currentQuestionNum","gameStarted","handleStartGame","Row","option","Col","xs","sm","md","lg","xl","xxl","block","disabled","hidden","answer","winner","padding","Badge","correct","justifyContent","fontWeight","marginRight","marginLeft","socket","io","undefined","questions","require","countdownFontStyle","fontFamily","display","countdownStyle","paddingTop","FlashCard","questionIndex","selectQuestion","useState","showResult","setShowResult","selectedOption","selectOption","setJoinedState","setUser","setJoinedUsers","waitingUsers","setWaitingUsers","setWinner","setGameState","isCountdownShow","countdownShow","setCurrentQuestionNum","useEffect","on","users","filter","joined","param","setTimeout","emit","plus","nextQuestionId","handleGetNextQuestionId","tempIndex","Math","floor","random","length","UserLists","Countdown","date","Date","now","renderer","seconds","completed","onComplete","handleCountdownCompleted","handleShowResult","question","ResultCard","handleShowCard","QuestionCard"],"sourceRoot":""}